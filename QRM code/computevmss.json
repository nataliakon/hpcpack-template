{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "subnetId": {
      "type": "string",
      "metadata": {
        "description": "The Id of the subnet in which the VMSS instances are created"
      }
    },
    "vmssName": {
      "type": "string",
      "metadata": {
        "description": "The VMSS name as well as the VM computer name prefix"
      }
    },
    "vmNumber": {
      "type": "int",
      "metadata": {
        "description": "The number of VMs in the VMSS."
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "The VM role size"
      }
    },
    "osDiskType": {
      "type": "string",
      "defaultValue": "StandardSSD_LRS",
      "metadata": {
        "description": "The OS disk type of the VM"
      }
    },
    "dataDiskSizeInGB": {
      "defaultValue": 128,
      "type": "int",
      "metadata": {
        "description": "The size in GB of each data disk that is attached to the VM."
      }
    },
    "dataDiskCount": {
      "defaultValue": 0,
      "type": "int",
      "metadata": {
        "description": "The count of data disks attached to the VM."
      }
    },
    "dataDiskType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "The data disk type of the VM"
      }
    },
    "computeNodeImage": {
      "type": "string",
      "defaultValue": "WindowsServer2019",
      "allowedValues": [
        "WindowsServer2012",
        "WindowsServer2012R2",
        "WindowsServer2016",
        "WindowsServer2019",
        "WindowsServer2022",
        "WindowsServer2012R2WithExcel",
        "WindowsServer2016WithExcel",
        "WindowsServer2012_Gen2",
        "WindowsServer2012R2_Gen2",
        "WindowsServer2016_Gen2",
        "WindowsServer2019_Gen2",
        "WindowsServer2022_Gen2",
        "CustomImage"
      ],
      "metadata": {
        "description": "The VM image of the compute nodes."
      }
    },
    "computeNodeImageResourceId": {
      "type": "string",
      "defaultValue": "/subscriptions/xxx/resourceGroups/xxx/providers/Microsoft.Compute/images/xxx",
      "metadata": {
        "description": "Specify only when 'CustomImage' selected for computeNodeImage. The resource Id of the compute node image, it can be a managed VM image in your own subscription (/subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.Compute/images/&lt;ImageName&gt;) or a shared VM image from Azure Shared Image Gallery (/subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.Compute/galleries/&lt;GalleryName&gt;/images/&lt;ImageName&gt;/versions/&lt;ImageVersion&gt;)."
      }
    },
    "imageOsPlatform": {
      "type": "string",
      "metadata": {
        "description": "The VM image OS platform for the compute nodes"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "The user name of the administrator"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the administrator"
      }
    },
    "sshPublicKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "If specified, the SSH Key for the administrator, only valid for Linux Virtual Machine."
      }      
    },
    "availabilityZones": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The availability zones where the VM instances are created if specified."
      }
    },
    "zoneBalance": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "The zone balance of the VM instances, only valid for VM instances in multiple zones."
      }
    },
    "osDiskSizeInGB": {
      "type": "int",
      "defaultValue": 128,
      "minValue": 30,
      "maxValue": 1023,
      "metadata": {
        "description": "The os disk size in GB"
      }
    },
    "singlePlacementGroup": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Specify whether the scale set is limited to a single placement group"
      }
    },
    "vmPriority": {
      "type": "string",
      "defaultValue": "Regular",
      "metadata": {
        "description": "Specify the priority of the virtual machines in the scale set, Regular or Low."
      }
    },
    "installRDMADriver": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specify whether to install RDMA driver"
      }
    },
    "enableAutomaticUpdates": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specify whether the VM is enabled for automatic updates, not used for Linux node"
      }
    },
    "enableAcceleratedNetworking": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specify whether to create the Azure VM with accelerated networking"
      }
    },
    "secrets": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The property 'osProfile/secrets', specify the set of certificates that shall be installed on the VM"
      }
    },
    "certThumbprint": {
      "type": "string",
      "defaultValue": " ",
      "metadata": {
        "description": "Thumbprint of the certificate."
      }
    },
    "headNodeList": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The head node list"
      }
    },
    "joinDomain": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specify whether this node need to join domain."
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The fully qualified domain name (FQDN) for the domain forest in which the cluster is created."
      }
    },
    "domainOUPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The organizational unit (OU) in the domain, used only when 'domainName' is specified."
      }
    },
    "domainJoinAccountName":{
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Username of the domain join account"
      }
    },
    "domainJointAccountPassword":{
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for domain joint account"
      }
    },
    "userAssignedIdentity": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional, specify the resource ID of the user assigned identity to associate with the virtual machine in the form: /subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.ManagedIdentity/userAssignedIdentities/&lt;identityName&gt;"
      }
    },
    "dnsServers": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The DNS servers in order, if not configured, the DNS servers configured in the virtual network will be used."
      }
    },
    "orchestrationMode": {
      "type": "string",
      "metadata": {
        "description": "orchestrationMode for VMSS. https://learn.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-orchestration-modes#a-comparison-of-flexible-uniform-and-availability-sets"
      },
      "defaultValue": "Uniform",
      "allowedValues": [
        "Flexible",
        "Uniform"
      ]
    },
    "vaultName": {
      "type": "string",
      "metadata": {
        "description": "Name of the KeyVault in which the certificate is stored."
      }
    },
    "vaultResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Resource Group of the KeyVault in which the certificate is stored."
      }
    },
    "certificateUrl": {
      "type": "string",
      "metadata": {
        "description": "Url of the certificate with version in KeyVault e.g. https://testault.vault.azure.net/secrets/testcert/b621es1db241e56a72d037479xab1r7."
      }
    }
  },
  "variables": {
    "computeNodeImages": {
      "WindowsServer2008R2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2008-R2-SP1",
        "version": "latest"
      },
      "WindowsServer2012": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-Datacenter",
        "version": "latest"
      },
      "WindowsServer2012R2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-R2-Datacenter",
        "version": "latest"
      },
      "WindowsServer2016": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2016-Datacenter",
        "version": "latest"
      },
      "WindowsServer2019": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2019-Datacenter",
        "version": "latest"
      },
      "WindowsServer2022": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2022-datacenter",
        "version": "latest"
      },
      "WindowsServer2012R2WithExcel": {
        "publisher": "MicrosoftWindowsServerHPCPack",
        "offer": "WindowsServerHPCPack",
        "sku": "2016U2CN-WS2012R2-Excel",
        "version": "latest"
      },
      "WindowsServer2016WithExcel": {
        "publisher": "MicrosoftWindowsServerHPCPack",
        "offer": "WindowsServerHPCPack",
        "sku": "2016U2CN-WS2016-Excel",
        "version": "latest"
      },
      "WindowsServer2012_Gen2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-datacenter-gensecond",
        "version": "latest"
      },
      "WindowsServer2012R2_Gen2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-r2-datacenter-gensecond",
        "version": "latest"
      },
      "WindowsServer2016_Gen2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2016-datacenter-gensecond",
        "version": "latest"
      },
      "WindowsServer2019_Gen2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2019-datacenter-gensecond",
        "version": "latest"
      },
      "WindowsServer2022_Gen2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2022-datacenter-g2",
        "version": "latest"
      },
      "CustomImage": {
        "id": "[trim(parameters('computeNodeImageResourceId'))]"
      }
    },
    "computeNodeImageRef": "[variables('computeNodeImages')[parameters('computeNodeImage')]]",
    "vaultName": "[trim(parameters('vaultName'))]",
    "vaultResourceGroup": "[trim(parameters('vaultResourceGroup'))]",
    "certSecrets": [
      {
        "sourceVault": {
          "id": "[resourceId(variables('vaultResourceGroup'), 'Microsoft.KeyVault/vaults', variables('vaultName'))]"
        },
        "vaultCertificates": [
          {
            "certificateUrl": "[parameters('certificateUrl')]",
            "certificateStore": "My"
          }
        ]
      }
    ],
    "userAssignedIdentityObject": {
      "type": "UserAssigned",
      "userAssignedIdentities": {
          "[parameters('userAssignedIdentity')]": {}
      }
    },
    "isWindowsOS": "[equals(toLower(parameters('imageOsPlatform')), 'windows')]",
    "trimmedSSHPublicKey": "[trim(parameters('sshPublicKey'))]",
    "windowsConfiguration": {
      "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]"
    },
    "emptyArray": [],
    "vmdataDisks": {
      "copy": [
        {
          "name": "dataDisks",
          "count": "[if(equals(parameters('dataDiskCount'), 0), 1, parameters('dataDiskCount'))]",
          "input": {
            "lun": "[copyIndex('dataDisks')]",
            "createOption": "Empty",
            "diskSizeGB": "[parameters('dataDiskSizeInGB')]",
            "managedDisk": {
              "storageAccountType": "[parameters('dataDiskType')]"
            }
          }
        }
      ]
    },
    "dnsSettings": {
      "dnsServers": "[parameters('dnsServers')]"
    },
    "protectedSettings": {
      "password": "[parameters('domainJointAccountPassword')]"
    },
    "sshKeyConfig": {
      "publicKeys": [
          {
              "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
              "keyData": "[variables('trimmedSSHPublicKey')]"
          }
      ]
    },
    "linuxConfiguration": {
      "disablePasswordAuthentication": "[not(empty(variables('trimmedSSHPublicKey')))]",
      "ssh": "[if(empty(variables('trimmedSSHPublicKey')), json('null'), variables('sshKeyConfig'))]"
    },
    "lnxBasicExtension": [
      {
        "name": "installHPCNodeAgent",
        "properties": {
          "provisionAfterExtensions": "[if(parameters('installRDMADriver'), array('installRDMADriver'), variables('emptyArray'))]",
          "publisher": "Microsoft.HpcPack",
          "type": "LinuxNodeAgent2016U1",
          "typeHandlerVersion": "16.2",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "ClusterConnectionString": "[parameters('headNodeList')]",
            "SSLThumbprint": "[parameters('certThumbprint')]",
            "DomainName": "[parameters('domainName')]"
          }
        }
      }
    ],
    "winBasicExtension": [
      {
        "name": "joinDomain",
        "properties": {
          "provisionAfterExtensions": "[if(parameters('installRDMADriver'), array('installRDMADriver'), variables('emptyArray'))]",
          "publisher": "Microsoft.Compute",
          "type": "JsonADDomainExtension",
          "typeHandlerVersion": "1.3",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "name": "[parameters('domainName')]",
            "ouPath":"[parameters('domainOUPath')]",
            "user": "[format('{0}\\{1}', parameters('domainName'), parameters('domainJoinAccountName'))]",
            "restart": "true",
            "options": "3"
          },
          "protectedSettings": "[if(parameters('joinDomain'), variables('protectedSettings'), json('null'))]"
        }
      }
    ],
    "hpcWinDriverExtension": {
      "name": "installRDMADriver",
      "properties": {
        "publisher": "Microsoft.HpcCompute",
        "type": "InfiniBandDriverWindows",
        "typeHandlerVersion": "1.5",
        "autoUpgradeMinorVersion": true,
        "settings": {
        }
      }
    },
    "hpcLinuxDriverExtension": {
      "name": "installRDMADriver",
      "properties": {
        "publisher": "Microsoft.HpcCompute",
        "type": "InfiniBandDriverLinux",
        "typeHandlerVersion": "1.2",
        "autoUpgradeMinorVersion": true,
        "settings": {
        }
      }
    },
    "basicVmssExtension": "[if(variables('isWindowsOS'), variables('winBasicExtension'), variables('lnxBasicExtension'))]",
    "hpcDriverExtension": "[if(variables('isWindowsOS'), variables('hpcWinDriverExtension'), variables('hpcLinuxDriverExtension'))]",
    "vmssExtensions": "[if(parameters('installRDMADriver'), concat(variables('basicVmssExtension'), array(variables('hpcDriverExtension'))), variables('basicVmssExtension'))]"
  },
  "resources": [
    {
      "apiVersion": "2023-03-01",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[parameters('vmssName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[parameters('vmSize')]",
        "tier": "Standard",
        "capacity": "[parameters('vmNumber')]"
      },
      "identity": "[if(empty(trim(parameters('userAssignedIdentity'))), json('null'), variables('userAssignedIdentityObject'))]",
      "properties": {
        "singlePlacementGroup": "[parameters('singlePlacementGroup')]",
        "overprovision": false,
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "imageReference": "[variables('computeNodeImageRef')]",
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "diskSizeGB": "[parameters('osDiskSizeInGB')]",
              "managedDisk": {
                "storageAccountType": "[parameters('osDiskType')]"
              }
            },
            "dataDisks": "[if(equals(parameters('dataDiskCount'), 0), variables('emptyArray'), variables('vmDataDisks').dataDisks)]"
          },
          "osProfile": {
            "computerNamePrefix": "[parameters('vmssName')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "linuxConfiguration": "[if(variables('isWindowsOS'), json('null'), variables('linuxConfiguration'))]",
            "windowsConfiguration": "[if(variables('isWindowsOS'), variables('windowsConfiguration'), json('null'))]",
            "secrets": "[variables('certSecrets')]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nicconfig1",
                "properties": {
                  "primary": true,
                  "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                  "dnsSettings": "[if(empty(parameters('dnsServers')), json('null'), variables('dnsSettings'))]",
                  "ipConfigurations": [
                    {
                      "name": "ipconfig1",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          },
          "extensionProfile": {
            "extensions": "[variables('vmssExtensions')]"
          },
          "priority": "[parameters('vmPriority')]",
          "evictionPolicy": "[if(equals(parameters('vmPriority'), 'Regular'), json('null'), 'Deallocate')]"
        }, 
        "orchestrationMode": "[parameters('orchestrationMode')]",
        "zoneBalance": "[parameters('zoneBalance')]"
      },
      "zones": "[parameters('availabilityZones')]"
    
  }
  ]
}
